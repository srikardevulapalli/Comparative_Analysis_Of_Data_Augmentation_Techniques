{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Importing Libraries"
      ],
      "metadata": {
        "id": "44fXQWGvpd_b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import torch\n",
        "import torchvision\n",
        "import tarfile\n",
        "from torchvision.datasets.utils import download_url\n",
        "from torch.utils.data import random_split\n",
        "from torchvision.datasets import ImageFolder\n",
        "from torchvision.transforms import ToTensor,ToPILImage\n",
        "import matplotlib.pyplot as plt\n",
        "from torchvision.utils import make_grid\n",
        "from torch.utils.data.dataloader import DataLoader\n",
        "from torchvision.utils import make_grid\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F"
      ],
      "metadata": {
        "id": "1AG53RGvtWvc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_xpPJvBam8Cs"
      },
      "outputs": [],
      "source": [
        "#Importing the libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from keras.layers import Dense, Conv2D, BatchNormalization, Activation\n",
        "from keras.layers import GlobalAveragePooling2D, Input, Flatten\n",
        "from keras import optimizers\n",
        "from keras.callbacks import ModelCheckpoint, LearningRateScheduler\n",
        "from keras.callbacks import ReduceLROnPlateau\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.regularizers import l2\n",
        "from keras import backend as K\n",
        "from keras.models import Model\n",
        "import keras\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Loading the data"
      ],
      "metadata": {
        "id": "CSm_zPqTqPyU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loading data\n",
        "cifar_10=tf.keras.datasets.cifar10.load_data()"
      ],
      "metadata": {
        "id": "Y7TB1FoTt6v7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Data Exploration"
      ],
      "metadata": {
        "id": "zA5P8K-CprbN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(cifar_10))\n",
        "print(len(cifar_10))\n",
        "print(type(cifar_10[0][0]))\n",
        "print(cifar_10[0][0].shape)\n",
        "print(cifar_10[1][0].shape)\n",
        "#Cifar10 data consists of 2 image cohorts. One for training (50000 images) and the other for testing (10000 images)\n",
        "# These images are 32 x 32 sq.pixel resolution color images (varying RGB)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zny8xKBlpNoX",
        "outputId": "29fed199-e9d3-4fee-dd34-4e26ec44819d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'tuple'>\n",
            "2\n",
            "<class 'numpy.ndarray'>\n",
            "(50000, 32, 32, 3)\n",
            "(10000, 32, 32, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Displaying sample images\n",
        "print(plt.imshow(cifar_10[0][0][49999]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "K-Qflm-ft0bV",
        "outputId": "b312c1a0-2f5e-4d70-dafe-f797999cb782"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AxesImage(54,36;334.8x217.44)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Displaying sample images\n",
        "plt.imshow(cifar_10[1][0][9999])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "g3-KFfN70LpK",
        "outputId": "6f1fe87b-6efb-40a7-aac7-43d1e8c9303f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f33c823aca0>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cifar-10 has images each belonging to 10 classes\n",
        "class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', \n",
        "          'dog', 'frog', 'horse', 'ship', 'truck']\n",
        "(x_train, y_train), (x_test, y_test) = cifar_10\n",
        "#Seperating the labels from images to enable easy modelling and validation\n",
        "print(x_train.shape)\n",
        "print(y_train.shape)\n",
        "print(x_test.shape)\n",
        "print(y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D5uMawPPnHLC",
        "outputId": "2113f997-ac2f-4386-a60b-4f46c6f55e18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 32, 32, 3)\n",
            "(50000, 1)\n",
            "(10000, 32, 32, 3)\n",
            "(10000, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Sample image\n",
        "plt.imshow(x_train[0,0:])\n",
        "print(class_names[y_train[0][0]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "KzKh3l2jyqkf",
        "outputId": "b95426c0-73a2-42fb-aedd-cf7fca6a34c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "frog\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classes, counts = np.unique(y_train, return_counts=True)\n",
        "plt_1 = plt.figure(figsize=(10, 3))\n",
        "plt.bar(class_names, counts,width = 0.4,label=True)\n",
        "# Distribution of images in the classes are same for train data (5000 images across 10 sets)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "aRpn-IirvKm9",
        "outputId": "eb5786d9-93ae-477b-d44f-bf4d4d0f731a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 10 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x216 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classes, counts = np.unique(y_test, return_counts=True)\n",
        "plt_1 = plt.figure(figsize=(10, 3))\n",
        "plt.bar(class_names, counts,width = 0.4,label=True)\n",
        "# Distribution of images in the classes are same for test data (1000 images across 10 sets)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "C5q9att0xn-a",
        "outputId": "4659b215-bb0d-4a04-f8ed-8419a3b24218"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 10 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x216 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Data Pre Processing"
      ],
      "metadata": {
        "id": "tA6Cb9MDzALR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Converting the integer labels to one-hot encoded format\n",
        "#This makes labels compatible with the model, and also provides an efficient way to represent the categorical data\n",
        "y_train = tf.keras.utils.to_categorical(y_train, 10)\n",
        "y_test = tf.keras.utils.to_categorical(y_test, 10)\n",
        "#Example\n",
        "print(y_train[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I-Taf_3Ot6BD",
        "outputId": "acf83b0d-068d-44a5-b207-8492966c65b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Performance optimization settings\n",
        "at = tf.data.AUTOTUNE\n",
        "#Batch size is an important hyperparameter that can affect the model's performance and training time\n",
        "batch_len = 32\n",
        "#It is used to resize the images to the same fixed size that can influence model's performance\n",
        "img_size = 32"
      ],
      "metadata": {
        "id": "dBqY_XYhGBlt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_train[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NWfhWR8m1Prs",
        "outputId": "7d595092-55ba-414c-dfd8-f327e77e1df6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_image(image, label):\n",
        "   #By resizing, the model is able to process all the images consistently and not be affected by the original size of the images. \n",
        "    image = tf.image.resize(image, (img_size, img_size))\n",
        "    #Normalizing image pixel values to a small range(0,1) improves training stability.\n",
        "    image = tf.image.convert_image_dtype(image, tf.float32) / 255.0\n",
        "    return image, label"
      ],
      "metadata": {
        "id": "8tApFkhJ55vj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Creating TensorFlow data objects\n",
        "#####  The following code snippet sets up the data pipeline by loading, shuffling, preprocessing, and batching the training and testing data and also creating a dataset by combining two shuffled datasets from the same training data. \n",
        "##### These operations help to improve the model's performance and make the data pipeline more efficient and easy to use with TensorFlow.These operations help to improve the model's performance and make the data pipeline more efficient and easy to use with TensorFlow.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "71Al3YSo08vk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#train_ds_a & train_ds_b are created by shuffling the training data (x_train, y_train) and applying the preprocess_image function to each example. \n",
        "#Shuffling the data is important to improve the model's generalization.\n",
        "train_ds_a_shuffle = (tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(1024))\n",
        "train_ds_a=train_ds_a_shuffle.map(preprocess_image, num_parallel_calls=at)\n",
        "\n",
        "train_ds_b_shuffle = (tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(1024))\n",
        "train_ds_b=train_ds_b_shuffle.map(preprocess_image, num_parallel_calls=at)\n",
        "\n",
        "#Loading (x_train, y_train) into a TensorFlow Dataset object.\n",
        "train_ds_simple = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n",
        "\n",
        "#Loading(x_test, y_test) into a TensorFlow Dataset object.\n",
        "test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test))\n",
        "\n",
        "#prefetch() is a method in TensorFlow Dataset that allows the pipeline to asynchronously fetch the next batch of data, while the current batch is being processed. \n",
        "train_ds_simple = (  \n",
        "    train_ds_simple.map(preprocess_image, num_parallel_calls=at)\n",
        "    .batch(batch_len)\n",
        "    .prefetch(at)\n",
        ")\n",
        "\n",
        "# Combine two shuffled datasets from the same training data.\n",
        "train_ds = tf.data.Dataset.zip((train_ds_a, train_ds_b))\n",
        "test_ds = (test_ds.map(preprocess_image, num_parallel_calls=at).batch(batch_len)\n",
        "    .prefetch(at))"
      ],
      "metadata": {
        "id": "5nxgE_2P04SS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cutmix Data Aumgentation\n"
      ],
      "metadata": {
        "id": "2Vic7X0J2eGG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sample_beta_distribution(size, concentration_0=0.2, concentration_1=0.2):\n",
        "    gamma_1_sample = tf.random.gamma(shape=[size], alpha=concentration_1)\n",
        "    gamma_2_sample = tf.random.gamma(shape=[size], alpha=concentration_0)\n",
        "    return gamma_1_sample / (gamma_1_sample + gamma_2_sample)\n",
        "\n",
        "\n",
        "@tf.function\n",
        "def get_box(lambda_value):\n",
        "    cut_rat = tf.math.sqrt(1.0 - lambda_value)\n",
        "\n",
        "    cut_w = img_size * cut_rat  # rw\n",
        "    cut_w = tf.cast(cut_w, tf.int32)\n",
        "\n",
        "    cut_h = img_size * cut_rat  # rh\n",
        "    cut_h = tf.cast(cut_h, tf.int32)\n",
        "\n",
        "    cut_x = tf.random.uniform((1,), minval=0, maxval=img_size, dtype=tf.int32)  # rx\n",
        "    cut_y = tf.random.uniform((1,), minval=0, maxval=img_size, dtype=tf.int32)  # ry\n",
        "\n",
        "    boundaryx1 = tf.clip_by_value(cut_x[0] - cut_w // 2, 0, img_size)\n",
        "    boundaryy1 = tf.clip_by_value(cut_y[0] - cut_h // 2, 0, img_size)\n",
        "    bbx2 = tf.clip_by_value(cut_x[0] + cut_w // 2, 0, img_size)\n",
        "    bby2 = tf.clip_by_value(cut_y[0] + cut_h // 2, 0, img_size)\n",
        "\n",
        "    target_h = bby2 - boundaryy1\n",
        "    if target_h == 0:\n",
        "        target_h += 1\n",
        "\n",
        "    target_w = bbx2 - boundaryx1\n",
        "    if target_w == 0:\n",
        "        target_w += 1\n",
        "\n",
        "    return boundaryx1, boundaryy1, target_h, target_w\n",
        "\n",
        "\n",
        "@tf.function\n",
        "def cutmix(train_ds_a, train_ds_b):\n",
        "    (image1, label1), (image2, label2) = train_ds_a, train_ds_b\n",
        "\n",
        "    alpha = [0.25]\n",
        "    beta = [0.25]\n",
        "\n",
        "    # Get a sample from the Beta distribution\n",
        "    lambda_value = sample_beta_distribution(1, alpha, beta)\n",
        "\n",
        "    # Define Lambda\n",
        "    lambda_value = lambda_value[0][0]\n",
        "\n",
        "    # Get the bounding box offsets, heights and widths\n",
        "    boundaryx1, boundaryy1, target_h, target_w = get_box(lambda_value)\n",
        "\n",
        "    # Get a patch from the second image (`image2`)\n",
        "    crop2 = tf.image.crop_to_bounding_box(\n",
        "        image2, boundaryy1, boundaryx1, target_h, target_w\n",
        "    )\n",
        "    # Pad the `image2` patch (`crop2`) with the same offset\n",
        "    image2 = tf.image.pad_to_bounding_box(\n",
        "        crop2, boundaryy1, boundaryx1, img_size, img_size\n",
        "    )\n",
        "    # Get a patch from the first image (`image1`)\n",
        "    crop1 = tf.image.crop_to_bounding_box(\n",
        "        image1, boundaryy1, boundaryx1, target_h, target_w\n",
        "    )\n",
        "    # Pad the `image1` patch (`crop1`) with the same offset\n",
        "    img1 = tf.image.pad_to_bounding_box(\n",
        "        crop1, boundaryy1, boundaryx1, img_size, img_size\n",
        "    )\n",
        "\n",
        "    # Modify the first image by subtracting the patch from `image1`\n",
        "    # (before applying the `image2` patch)\n",
        "    image1 = image1 - img1\n",
        "    # Add the modified `image1` and `image2`  together to get the CutMix image\n",
        "    image = image1 + image2\n",
        "\n",
        "    # Adjust Lambda in accordance to the pixel ration\n",
        "    lambda_value = 1 - (target_w * target_h) / (img_size * img_size)\n",
        "    lambda_value = tf.cast(lambda_value, tf.float64)\n",
        "    label1 = tf.cast(label1, tf.float64)\n",
        "    label2 = tf.cast(label2, tf.float64)\n",
        "    # Combine the labels of both images\n",
        "    label = lambda_value * label1 + (1 - lambda_value) * label2\n",
        "    return image, label"
      ],
      "metadata": {
        "id": "4b4X9H2lGEpW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the new dataset using our `cutmix` utility\n",
        "train_ds_cmu = (train_ds.shuffle(1024)\n",
        "    .map(cutmix, num_parallel_calls=at)\n",
        "    .batch(batch_len)\n",
        "    .prefetch(at)\n",
        ")\n",
        "print(train_ds_cmu)\n",
        "# Let's preview 9 samples from the dataset\n",
        "image_batch, label_batch = next(iter(train_ds_cmu))\n",
        "plt.figure(figsize=(10, 10))\n",
        "for i in range(9):\n",
        "    ax = plt.subplot(3, 3, i + 1)\n",
        "    plt.title(class_names[np.argmax(label_batch[i])])\n",
        "    plt.imshow(image_batch[i])\n",
        "    plt.axis(\"off\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "zhmyF2PH4qau",
        "outputId": "ea04e204-688f-4492-e4ed-4e2ba54fa6fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<PrefetchDataset shapes: ((None, 32, 32, 3), (None, 10)), types: (tf.float32, tf.float64)>\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_ds_cmu)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZbXPq5ICiOGS",
        "outputId": "a8dc77a2-e0e2-4821-b0f0-647b68727fa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1563"
            ]
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iXnj5lrEWPVW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def resnet_layer(\n",
        "    inputs,\n",
        "    num_filters=16,\n",
        "    kernel_size=3,\n",
        "    strides=1,\n",
        "    activation=\"relu\",\n",
        "    batch_normalization=True,\n",
        "    conv_first=True,\n",
        "):\n",
        "    conv = keras.layers.Conv2D(\n",
        "        num_filters,\n",
        "        kernel_size=kernel_size,\n",
        "        strides=strides,\n",
        "        padding=\"same\",\n",
        "        kernel_initializer=\"he_normal\",\n",
        "        kernel_regularizer=keras.regularizers.l2(1e-4),\n",
        "    )\n",
        "    x = inputs\n",
        "    if conv_first:\n",
        "        x = conv(x)\n",
        "        if batch_normalization:\n",
        "            x = keras.layers.BatchNormalization()(x)\n",
        "        if activation is not None:\n",
        "            x = keras.layers.Activation(activation)(x)\n",
        "    else:\n",
        "        if batch_normalization:\n",
        "            x = keras.layers.BatchNormalization()(x)\n",
        "        if activation is not None:\n",
        "            x = keras.layers.Activation(activation)(x)\n",
        "        x = conv(x)\n",
        "    return x\n",
        "\n",
        "\n",
        "def resnet_v20(input_shape, depth, num_classes=10):\n",
        "    if (depth - 2) % 6 != 0:\n",
        "        raise ValueError(\"depth should be 6n+2 (eg 20, 32, 44 in [a])\")\n",
        "    # Start model definition.\n",
        "    num_filters = 16\n",
        "    num_res_blocks = int((depth - 2) / 6)\n",
        "\n",
        "    inputs = keras.layers.Input(shape=input_shape)\n",
        "    x = resnet_layer(inputs=inputs)\n",
        "    # Instantiate the stack of residual units\n",
        "    for stack in range(3):\n",
        "        for res_block in range(num_res_blocks):\n",
        "            strides = 1\n",
        "            if stack > 0 and res_block == 0:  # first layer but not first stack\n",
        "                strides = 2  # downsample\n",
        "            y = resnet_layer(inputs=x, num_filters=num_filters, strides=strides)\n",
        "            y = resnet_layer(inputs=y, num_filters=num_filters, activation=None)\n",
        "            if stack > 0 and res_block == 0:  # first layer but not first stack\n",
        "                # linear projection residual shortcut connection to match\n",
        "                # changed dims\n",
        "                x = resnet_layer(\n",
        "                    inputs=x,\n",
        "                    num_filters=num_filters,\n",
        "                    kernel_size=1,\n",
        "                    strides=strides,\n",
        "                    activation=None,\n",
        "                    batch_normalization=False,\n",
        "                )\n",
        "            x = keras.layers.add([x, y])\n",
        "            x = keras.layers.Activation(\"relu\")(x)\n",
        "        num_filters *= 2\n",
        "\n",
        "    # Add classifier on top.\n",
        "    # v1 does not use BN after last shortcut connection-ReLU\n",
        "    x = keras.layers.AveragePooling2D(pool_size=8)(x)\n",
        "    y = keras.layers.Flatten()(x)\n",
        "    outputs = keras.layers.Dense(\n",
        "        num_classes, activation=\"softmax\", kernel_initializer=\"he_normal\"\n",
        "    )(y)\n",
        "\n",
        "    # Instantiate model.\n",
        "    model = keras.models.Model(inputs=inputs, outputs=outputs)\n",
        "    return model\n",
        "\n",
        "\n",
        "def training_model():\n",
        "    return resnet_v20((32, 32, 3), 20)\n",
        "\n",
        "\n",
        "initial_model = training_model()\n",
        "initial_model.save_weights(\"initial_weights.h5\")"
      ],
      "metadata": {
        "id": "Wn0A7WBP8evu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Input\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.losses import SparseCategoricalCrossentropy\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint\n",
        "from tensorflow.keras.mixed_precision import experimental as mixed_precision\n",
        "\n",
        "# Set mixed precision policy\n",
        "policy = mixed_precision.Policy('mixed_float16')\n",
        "mixed_precision.set_policy(policy)\n",
        "\n"
      ],
      "metadata": {
        "id": "xLQFKWERLtNV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the ResNet50 model\n",
        "model = training_model()\n",
        "model.load_weights(\"initial_weights.h5\")\n",
        "\n",
        "model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n",
        "model.fit(train_ds_cmu, validation_data=test_ds,epochs=15)\n",
        "\n",
        "test_loss, test_accuracy = model.evaluate(test_ds)\n",
        "print(\"Test accuracy: {:.2f}%\".format(test_accuracy * 100)) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VL1VuDDaPZl3",
        "outputId": "991ad44a-a6d9-4a6d-a995-1a638a16bb13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/15\n",
            "1563/1563 [==============================] - 830s 529ms/step - loss: 2.0776 - accuracy: 0.3395 - val_loss: 1.4341 - val_accuracy: 0.5418\n",
            "Epoch 2/15\n",
            "1563/1563 [==============================] - 938s 600ms/step - loss: 1.7307 - accuracy: 0.5008 - val_loss: 1.3683 - val_accuracy: 0.5674\n",
            "Epoch 3/15\n",
            "1563/1563 [==============================] - 935s 598ms/step - loss: 1.6066 - accuracy: 0.5607 - val_loss: 1.1375 - val_accuracy: 0.6542\n",
            "Epoch 4/15\n",
            "1563/1563 [==============================] - 950s 608ms/step - loss: 1.5260 - accuracy: 0.6003 - val_loss: 1.2353 - val_accuracy: 0.6433\n",
            "Epoch 5/15\n",
            "1563/1563 [==============================] - 942s 603ms/step - loss: 1.4842 - accuracy: 0.6149 - val_loss: 1.2600 - val_accuracy: 0.6057\n",
            "Epoch 6/15\n",
            "1563/1563 [==============================] - 960s 614ms/step - loss: 1.4533 - accuracy: 0.6322 - val_loss: 0.9765 - val_accuracy: 0.7137\n",
            "Epoch 7/15\n",
            "1563/1563 [==============================] - 974s 623ms/step - loss: 1.4187 - accuracy: 0.6472 - val_loss: 0.9810 - val_accuracy: 0.7167\n",
            "Epoch 8/15\n",
            "1563/1563 [==============================] - 997s 638ms/step - loss: 1.3990 - accuracy: 0.6599 - val_loss: 0.9214 - val_accuracy: 0.7427\n",
            "Epoch 9/15\n",
            "1563/1563 [==============================] - 997s 638ms/step - loss: 1.3663 - accuracy: 0.6698 - val_loss: 0.9212 - val_accuracy: 0.7489\n",
            "Epoch 10/15\n",
            "1563/1563 [==============================] - 976s 624ms/step - loss: 1.3576 - accuracy: 0.6802 - val_loss: 0.8903 - val_accuracy: 0.7471\n",
            "Epoch 11/15\n",
            "1563/1563 [==============================] - 978s 626ms/step - loss: 1.3403 - accuracy: 0.6831 - val_loss: 0.9421 - val_accuracy: 0.7409\n",
            "Epoch 12/15\n",
            " 513/1563 [========>.....................] - ETA: 10:26 - loss: 1.3288 - accuracy: 0.6885"
          ]
        }
      ]
    }
  ]
}